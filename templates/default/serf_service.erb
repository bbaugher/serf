#!/bin/bash
<%# coding: UTF-8%>
# Auto-generated by Chef, do not edit!
### BEGIN INIT INFO
# Provides: serf
# Short-Description: Serf agent
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
### END INIT INFO

NAME="Serf Agent"
SERF_BINARY=<%= node["serf"]["base_directory"] %>/bin/serf
SERF_ROLE=<%= node["serf"]["role"] %>
SERF_NODE=<%= node["serf"]["node"] %>
SERF_RPC_ADDRESS=<%= @rpc_address %>
SERF_BIND_ADDRESS=<%= @bind_address %>
SERF_LOG_LEVEL=<%= node["serf"]["log_level"] %>
SERF_AGENT_LOG=<%= node["serf"]["log_directory"] %>/agent.log
SERF_JOIN_ADDRESSES="<%= node["serf"]["join_addresses"].join " " %>"
SERF_EVENT_HANDLERS="<%= @event_handlers %>"

SLEEP_TIME=5
CURRENT_WAIT=0
TIMEOUT=30

start() {
	findPid
	
	if [ "" = "$FOUND_PID" ]; then
      $SERF_BINARY agent -role "$SERF_ROLE" -node $SERF_NODE -bind $SERF_BIND_ADDRESS -rpc-addr $SERF_RPC_ADDRESS -log-level $SERF_LOG_LEVEL $SERF_EVENT_HANDLERS &>> $SERF_AGENT_LOG &
      
      if [[ $? -ne 0 ]]; then
        echo "Error starting $NAME"
        exit 1
      fi
      
      echo "$NAME successfully started"
      
      if [[ ! -z $SERF_JOIN_ADDRESSES ]]; then
	    $SERF_BINARY join -rpc-addr $SERF_RPC_ADDRESS $SERF_JOIN_ADDRESSES
	      
	    if [[ $? -ne 0 ]]; then
	      echo "Error joing $NAME to cluster"
	      exit 1
	    fi
	      
	    echo "$NAME successfully joined existing cluster(s)"
      fi
      
    else
      echo "$NAME is already running"
    fi
}

stop() {
	findPid
	if [ -z "$FOUND_PID" ]; then
      echo "$NAME is not running, nothing to stop"
    else
    
      while [[ -n $FOUND_PID ]]; 
  	  do
        echo "Attempting to shutdown $NAME..."
        kill -INT $FOUND_PID
      
        if [[ $? -ne 0 ]]; then
	      echo "Error stopping $NAME"
	      exit 1
	    fi
	    
	    sleep $SLEEP_TIME
        CURRENT_WAIT=$(($CURRENT_WAIT+$SLEEP_TIME))
        if [[ $CURRENT_WAIT -gt $TIMEOUT ]]; then
          echo "Timed out waiting for $NAME to stop"
          exit 1
        fi
        findPid
      done
      
      echo "Stopped $NAME"
      
    fi
}

status() {
  findPid
  if [ -z "$FOUND_PID" ]; then
    echo "$NAME is not running" ; exit 1
  else
    echo "$NAME is running : $FOUND_PID" 
  fi
}

findPid() {
	FOUND_PID=`pgrep -f <%= node["serf"]["base_dir"]%>/bin/serf`
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart)
    stop
    start
  ;;
  status)
    status
  ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0
